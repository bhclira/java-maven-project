package br.com.dio.mapper;

import br.com.dio.dto.UserDTO;
import br.com.dio.model.UserModel;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;

@Mapper
public interface UserMapper {

    @Mapping(target = "code", source = "id")
    @Mapping(target = "userName", source = "name")
    UserModel toModel(final UserDTO dto);
    
    @Mapping(target = "id", source = "code")
    @Mapping(target = "name", source = "userName")
    UserDTO toDTO(final UserModel model);


}

/* DOCUMENTA√á√ÉO EXPLICANDO O CODIGO
M√©todo toModel
Esse m√©todo faz a tradu√ß√£o de um objeto UserDTO (formul√°rio) para um objeto UserModel (formato para banco de dados).

Anota√ß√µes @Mapping
Essas anota√ß√µes dizem ao MapStruct como fazer a tradu√ß√£o dos campos. Vamos detalhar cada uma:

@Mapping(target = "code", source = "id")

target ("code"): Este √© o campo no UserModel (destino) que queremos preencher.

source ("id"): Este √© o campo no UserDTO (origem) de onde estamos pegando o valor.

Tradu√ß√£o: Pegamos o valor do campo id do UserDTO e colocamos no campo code do UserModel.

@Mapping(target = "userName", source = "name")

target ("userName"): Este √© o campo no UserModel (destino) que queremos preencher.

source ("name"): Este √© o campo no UserDTO (origem) de onde estamos pegando o valor.

Tradu√ß√£o: Pegamos o valor do campo name do UserDTO e colocamos no campo userName do UserModel.

Resumo
Quando voc√™ chama o m√©todo toModel, o MapStruct pega o objeto UserDTO, l√™ os valores dos campos id e name, e preenche os campos code e userName do novo objeto UserModel com esses valores.

Se precisar de mais alguma explica√ß√£o ou tiver mais d√∫vidas, estou aqui para ajudar! üòä
 */